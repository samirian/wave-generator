
Wave generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000200  00800060  000000a4  00000118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000348  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c0  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006da  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000491  00000000  00000000  0000139e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001830  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000397  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a7  00000000  00000000  00001c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001e26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	12 e0       	ldi	r17, 0x02	; 2
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 ea       	ldi	r30, 0xA4	; 164
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	12 d0       	rcall	.+36     	; 0x6e <main>
  4a:	2a c0       	rjmp	.+84     	; 0xa0 <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <sineGenerator>:
		_delay_us(100);
		*PORT = i;
	}
}

void sineGenerator(volatile uint8_t *PORT, int frequeny){
  4e:	dc 01       	movw	r26, r24
  50:	e0 e6       	ldi	r30, 0x60	; 96
  52:	f0 e0       	ldi	r31, 0x00	; 0
  54:	20 e6       	ldi	r18, 0x60	; 96
  56:	32 e0       	ldi	r19, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  58:	81 e2       	ldi	r24, 0x21	; 33
  5a:	8a 95       	dec	r24
  5c:	f1 f7       	brne	.-4      	; 0x5a <sineGenerator+0xc>
  5e:	00 00       	nop
	for (int i = 0 ; i < 256 ;i++){
		_delay_us(100);
		*PORT = sine[i];
  60:	90 81       	ld	r25, Z
  62:	32 96       	adiw	r30, 0x02	; 2
  64:	9c 93       	st	X, r25
		*PORT = i;
	}
}

void sineGenerator(volatile uint8_t *PORT, int frequeny){
	for (int i = 0 ; i < 256 ;i++){
  66:	e2 17       	cp	r30, r18
  68:	f3 07       	cpc	r31, r19
  6a:	b1 f7       	brne	.-20     	; 0x58 <sineGenerator+0xa>
		_delay_us(100);
		*PORT = sine[i];
	}
  6c:	08 95       	ret

0000006e <main>:


int main(void)
{
    /* Replace with your application code */
	DDRB = 0xff;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	87 bb       	out	0x17, r24	; 23
	uart_init();
  72:	08 d0       	rcall	.+16     	; 0x84 <uart_init>
	uart_transmit('a');
  74:	81 e6       	ldi	r24, 0x61	; 97
  76:	10 d0       	rcall	.+32     	; 0x98 <uart_transmit>
    while (1) 
    {
		//pulseGenerator(&PORTB, 5);
		//stairGenerator(&PORTB,5);
		sineGenerator(&PORTB,5);
  78:	65 e0       	ldi	r22, 0x05	; 5
  7a:	70 e0       	ldi	r23, 0x00	; 0
  7c:	88 e3       	ldi	r24, 0x38	; 56
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	e6 df       	rcall	.-52     	; 0x4e <sineGenerator>
  82:	fa cf       	rjmp	.-12     	; 0x78 <main+0xa>

00000084 <uart_init>:
#include <avr/interrupt.h>


void uart_init (void)
{
	UBRRH = (BAUDRATE>>8);                      // shift the register right by 8 bits
  84:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUDRATE;                           // set baud rate
  86:	83 e3       	ldi	r24, 0x33	; 51
  88:	89 b9       	out	0x09, r24	; 9
	UCSRB|= (1<<TXEN)|(1<<RXEN);                // enable receiver and transmitter
  8a:	8a b1       	in	r24, 0x0a	; 10
  8c:	88 61       	ori	r24, 0x18	; 24
  8e:	8a b9       	out	0x0a, r24	; 10
	UCSRC|= (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);   // 8bit data format
  90:	80 b5       	in	r24, 0x20	; 32
  92:	86 68       	ori	r24, 0x86	; 134
  94:	80 bd       	out	0x20, r24	; 32
  96:	08 95       	ret

00000098 <uart_transmit>:
}

// function to send data
void uart_transmit (unsigned char data)
{
	while (!( UCSRA & (1<<UDRE)));                // wait while register is free
  98:	5d 9b       	sbis	0x0b, 5	; 11
  9a:	fe cf       	rjmp	.-4      	; 0x98 <uart_transmit>
	UDR = data;                                   // load data in the register
  9c:	8c b9       	out	0x0c, r24	; 12
  9e:	08 95       	ret

000000a0 <_exit>:
  a0:	f8 94       	cli

000000a2 <__stop_program>:
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <__stop_program>
